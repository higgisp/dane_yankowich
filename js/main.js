$(document).ready(function() {
  var winHeight = $(window).height();
  $('.home-banner').css({
    'min-height': winHeight,
  });

  $(window).bind("load resize", function() {
    $('.home-banner').css({
      'min-height': winHeight,
    });
  });

  $("#nav-toggle").on('click', function() {
    $("#nav-toggle").toggleClass("active");
    $("#menu").slideToggle();
  });

  $('#hello').click(function(event) {
    event.preventDefault();
    $.scrollTo($('.resume'), 500);
  });

  $('#work').click(function(event) {
    event.preventDefault();
    $.scrollTo($('.work'), 500);
  });

  $('#contact').click(function(event) {
    event.preventDefault();
    $.scrollTo($('footer'), 500);
  });

  $('.tile')
    .on("touchstart", function (e) {
      this.hover();
    }).on("touchend", function (e) {
      this.unbind();
  });

  $(document).foundation({
    orbit: {
      animation: 'slide', // Sets the type of animation used for transitioning between slides, can also be 'fade'
      timer_speed: 9999999, // Sets the amount of time in milliseconds before transitioning a slide
      pause_on_hover: true, // Pauses on the current slide while hovering
      resume_on_mouseout: true, // If pause on hover is set to true, this setting resumes playback after mousing out of slide
      next_on_click: true, // Advance to next slide on click
      animation_speed: 1000, // Sets the amount of time in milliseconds the transition between slides will last
      stack_on_small: false,
      navigation_arrows: true,
      slide_number: false,
      bullets: true, // Does the slider have bullets visible?
      timer: false, // Does the slider have a timer visible?
      swipe: true,
    }
  });


  //slideshow style interval
  var autoSwap = setInterval( swap,999999999);

  //pause slideshow and reinstantiate on mouseout
  $('ul, span').hover(
    function () {
      clearInterval(autoSwap);
  },
    function () {
     autoSwap = setInterval( swap,3500);
  });

  //global variables
  var items = [];
  var startItem = 1;
  var position = 0;
  var itemCount = $('.carousel li.items').length;
  var leftpos = itemCount;
  var resetCount = itemCount;

  //unused: gather text inside items class
  $('li.items').each(function(index) {
      items[index] = $(this).text();
  });

  //swap images function
  function swap(action) {
    var direction = action;

    //moving carousel backwards
    if(direction == 'counter-clockwise') {
      var leftitem = $('.left-pos').attr('id') - 1;
      if(leftitem == 0) {
        leftitem = itemCount;
      }

      $('.right-pos').removeClass('right-pos').addClass('back-pos');
      $('.main-pos').removeClass('main-pos').addClass('right-pos');
      $('.left-pos').removeClass('left-pos').addClass('main-pos');
      $('#'+leftitem+'').removeClass('back-pos').addClass('left-pos');

      startItem--;
      if(startItem < 1) {
        startItem = itemCount;
      }
    }

    //moving carousel forward
    if(direction == 'clockwise' || direction == '' || direction == null ) {
      function pos(positionvalue) {
        if(positionvalue != 'leftposition') {
          //increment image list id
          position++;

          //if final result is greater than image count, reset position.
          if((startItem+position) > resetCount) {
            position = 1-startItem;
          }
        }

        //setting the left positioned item
        if(positionvalue == 'leftposition') {
          //left positioned image should always be one left than main positioned image.
          position = startItem - 1;

          //reset last image in list to left position if first image is in main position
          if(position < 1) {
            position = itemCount;
          }
        }

        return position;
      }

     $('#'+ startItem +'').removeClass('main-pos').addClass('left-pos');
     $('#'+ (startItem+pos()) +'').removeClass('right-pos').addClass('main-pos');
     $('#'+ (startItem+pos()) +'').removeClass('back-pos').addClass('right-pos');
     $('#'+ pos('leftposition') +'').removeClass('left-pos').addClass('back-pos');

      startItem++;
      position=0;
      if(startItem > itemCount) {
        startItem = 1;
      }
    }
  }

  //next button click function
  $('#next').click(function() {
    swap('clockwise');
  });

  //prev button click function
  $('#prev').click(function() {
    swap('counter-clockwise');
  });

  //if any visible items are clicked
  $('li').click(function() {
    if($(this).attr('class') == 'items left-pos') {
       swap('counter-clockwise');
    }
    else {
      swap('clockwise');
    }
  });
});

// Generated by CoffeeScript 1.3.3
(function() {
    var e, t;
    e = function() {
        function e(e) {
            var t, n;
            this.options = {
                target: "instafeed",
                get: "popular",
                resolution: "thumbnail",
                sortBy: "most-recent",
                links: !0,
                limit: 15,
                mock: !1
            };
            if (typeof e == "object")
                for (t in e) n = e[t], this.options[t] = n;
            this.unique = this._genKey()
        }
        return e.prototype.run = function() {
            var t, n, r;
            if (typeof this.options.clientId != "string" && typeof this.options.accessToken != "string") throw new Error("Missing clientId or accessToken.");
            if (typeof this.options.accessToken != "string" && typeof this.options.clientId != "string") throw new Error("Missing clientId or accessToken.");
            return this.options.before != null && typeof this.options.before == "function" && this.options.before.call(this), typeof document != "undefined" && document !== null && (r = document.createElement("script"), r.id = "instafeed-fetcher", r.src = this._buildUrl(), t = document.getElementsByTagName("head"), t[0].appendChild(r), n = "instafeedCache" + this.unique, window[n] = new e(this.options), window[n].unique = this.unique), !0
        }, e.prototype.parse = function(e) {
            var t, n, r, i, s, o, u, a, f, l, c, h, p, d, v;
            if (typeof e != "object") {
                if (this.options.error != null && typeof this.options.error == "function") return this.options.error.call(this, "Invalid JSON data"), !1;
                throw new Error("Invalid JSON response")
            }
            if (e.meta.code !== 200) {
                if (this.options.error != null && typeof this.options.error == "function") return this.options.error.call(this, e.meta.error_message), !1;
                throw new Error("Error from Instagram: " + e.meta.error_message)
            }
            if (e.data.length === 0) {
                if (this.options.error != null && typeof this.options.error == "function") return this.options.error.call(this, "No images were returned from Instagram"), !1;
                throw new Error("No images were returned from Instagram")
            }
            this.options.success != null && typeof this.options.success == "function" && this.options.success.call(this, e);
            if (this.options.sortBy !== "most-recent") {
                this.options.sortBy === "random" ? c = ["", "random"] : c = this.options.sortBy.split("-"), l = c[0] === "least" ? !0 : !1;
                switch (c[1]) {
                    case "random":
                        e.data.sort(function() {
                            return .5 - Math.random()
                        });
                        break;
                    case "recent":
                        e.data = this._sortBy(e.data, "created_time", l);
                        break;
                    case "liked":
                        e.data = this._sortBy(e.data, "likes.count", l);
                        break;
                    case "commented":
                        e.data = this._sortBy(e.data, "comments.count", l);
                        break;
                    default:
                        throw new Error("Invalid option for sortBy: '" + this.options.sortBy + "'.")
                }
            }
            if (typeof document != "undefined" && document !== null && this.options.mock === !1) {
                document.getElementById(this.options.target).innerHTML = "", u = e.data, u.length > this.options.limit && (u = u.slice(0, this.options.limit + 1 || 9e9));
                if (this.options.template != null && typeof this.options.template == "string") {
                    i = "", o = "";
                    for (h = 0, d = u.length; h < d; h++) s = u[h], o = this._makeTemplate(this.options.template, {
                        model: s,
                        id: s.id,
                        link: s.link,
                        image: s.images[this.options.resolution].url,
                        caption: this._getObjectProperty(s, "caption.text"),
                        likes: s.likes.count,
                        comments: s.comments.count,
                        location: this._getObjectProperty(s, "location.name")
                    }), i += o;
                    document.getElementById(this.options.target).innerHTML = i
                } else {
                    n = document.createDocumentFragment();
                    for (p = 0, v = u.length; p < v; p++) s = u[p], a = document.createElement("img"), a.src = s.images[this.options.resolution].url, this.options.links === !0 ? (t = document.createElement("a"), t.href = s.link, t.appendChild(a), n.appendChild(t)) : n.appendChild(a);
                    document.getElementById(this.options.target).appendChild(n)
                }
                r = document.getElementsByTagName("head")[0], r.removeChild(document.getElementById("instafeed-fetcher")), f = "instafeedCache" + this.unique, delete window[f]
            }
            return this.options.after != null && typeof this.options.after == "function" && this.options.after.call(this), !0
        }, e.prototype._buildUrl = function() {
            var e, t, n;
            e = "https://api.instagram.com/v1";
            switch (this.options.get) {
                case "popular":
                    t = "media/popular";
                    break;
                case "tagged":
                    if (typeof this.options.tagName != "string") throw new Error("No tag name specified. Use the 'tagName' option.");
                    t = "tags/" + this.options.tagName + "/media/recent";
                    break;
                case "location":
                    if (typeof this.options.locationId != "number") throw new Error("No location specified. Use the 'locationId' option.");
                    t = "locations/" + this.options.locationId + "/media/recent";
                    break;
                case "user":
                    if (typeof this.options.userId != "number") throw new Error("No user specified. Use the 'userId' option.");
                    if (typeof this.options.accessToken != "string") throw new Error("No access token. Use the 'accessToken' option.");
                    t = "users/" + this.options.userId + "/media/recent";
                    break;
                default:
                    throw new Error("Invalid option for get: '" + this.options.get + "'.")
            }
            return n = "" + e + "/" + t, this.options.accessToken != null ? n += "?access_token=" + this.options.accessToken : n += "?client_id=" + this.options.clientId, n += "&count=" + this.options.limit, n += "&callback=instafeedCache" + this.unique + ".parse", n
        }, e.prototype._genKey = function() {
            var e;
            return e = function() {
                return ((1 + Math.random()) * 65536 | 0).toString(16).substring(1)
            }, "" + e() + e() + e() + e()
        }, e.prototype._makeTemplate = function(e, t) {
            var n, r, i, s, o;
            r = /(?:\{{2})([\w\[\]\.]+)(?:\}{2})/, n = e;
            while (r.test(n)) i = n.match(r)[1], s = (o = this._getObjectProperty(t, i)) != null ? o : "", n = n.replace(r, "" + s);
            return n
        }, e.prototype._getObjectProperty = function(e, t) {
            var n, r;
            t = t.replace(/\[(\w+)\]/g, ".$1"), r = t.split(".");
            while (r.length) {
                n = r.shift();
                if (!(e != null && n in e)) return null;
                e = e[n]
            }
            return e
        }, e.prototype._sortBy = function(e, t, n) {
            var r;
            return r = function(e, r) {
                var i, s;
                return i = this._getObjectProperty(e, t), s = this._getObjectProperty(r, t), n ? i > s ? 1 : -1 : i < s ? 1 : -1
            }, e.sort(r.bind(this)), e
        }, e
    }(), t = typeof exports != "undefined" && exports !== null ? exports : window, t.Instafeed = e
}).call(this),
    function() {
        $(document).ready(function() {
            return $("#header_view_more_info").click(function() {
                return $(".more_info_content").slideToggle(), $(this).toggleClass("active"), !1
            })
        })
    }.call(this),
    function() {
        var e;
        e = new Instafeed({
            get: "user",
            userId: 1905674816,
            accessToken: "1905674816.467ede5.51288b450ce745caac83a4d43d271776",
            clientId: "4ce40fc0883a4c6a94855edec76ec7ce",
            resolution: "standard_resolution",
            template: '      <div id="{{id}}" class="instagram_container">        <div id="{{id}}">          <a href="{{link}}" target="_blank" title="{{caption}} by @{{model.user.username}}" >            <img src="{{image}}" alt="{{caption}} by @{{model.user.username}}" class="instagram_image" />          </a>        </div>        <div class="instagram_image_meta">                <div class="caption instagram_image_meta_item">            <p>              {{caption}}            </p>          </div>        </div>      </div>    '
        }), e.run()
    }.call(this);

